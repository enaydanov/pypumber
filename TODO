 Tasks
==============================

 - Supplimentary modules
  - PEG Parser
    - Memorize for PEG Parser
    + Improve structure of library
    + Shadowed/Skipped rules
    + Source (representation of source input)
    + Node (representation of AST)
    - RE decorator
  + Test runner
  + Singleton
  + Multiplexer
  + cfg.Options
    + apply options to given classes
    + single value, accumulator
  + Pypumber Options Parser
    - Help callback for language
    - '--format' option
    - '--out' option
    - set defaults (language, etc.)
  - Version
  + AttributeMapper
    - Remove it (Node have similar functionality)
  + Find files

 - Tests:
  - sequence
  - guess url
  - more tests for find_files
  - full coverage testing

 - Gherkin
  + Grammar
  + Language
    - Options:
      + language
    - Try to implement setting language per Features instance
    
  - Parser
    + Background statement
    - Examples statements
    - Table
 
 + Features:
  + Options:
    + path
    + excludes
    + language
 
 - StepDefinitions (step definitions collector)
  - Options:
    + path
    + excludes
    + require
    - guess
  - Load 'support' folder first.

 - Run
  - Options:
    + tags
    + scenario_names
    - strict
    - autoformat
  - Support for multiline args

 - Configuration
  + Default
    - options
	- CLI
    - Options
      + require
      + language
      - format
      - out
      + tags
      + scenario
      + exclude
      + profile
      + [no-]color
      + dry-run
      + autoformat
      + no-multiline
      + no-source
      + no-snippets
      + quiet
      + backtrace
      + verbose
      + guess
	+ YAML
  - Environment
	+ Layering of options (Default -> Profile -> ENV -> Command line)
  + set_defaults

 - Reporters
	- pretty
    - Options:
      - [no-]color
      - no-source
      - no-snippets
      - verbose
      - no-multiline
	- profile
	- progress
	- rerun
	- HTML
	- unittest
  - Loading reporter from file (like --format somefile.py)
 
 - Output
	- stdout
	- file


 Scheme
==============================

 CLI YAML
  |   |
  |   |
  |   |           Output
  |   |
  |   |	           ^  ^ 
  |   |            |  |
  V   V   +--------+  |
          |           |
Configuration -->  Run  <-- StepDefinitions
  |
  |                ^  ^
  |                |  |
  |     +----------+  +-----------+
  |	    |      	                  |
  | Reporter                  Scenarios <-- Grammar <-- Languages
  |                                                        
  |                                                        ^
  |                                                        |
  +--------------------------------------------------------+


 Options
==============================
  path, excludes => Features, StepDefinitions
  language => Features
  require, guess, dry-run => StepDefinitions
  tags, scenario, autoformat, strict, backtrace => Run
  format => Run (for choose Reporter(s))
  out => Reporters (where)
  profile => Configuration
  [no-]color, no-source, no-snippets, quiet, verbose, no-multiline => Reporter 
